const WS_PORT = 3006; // –ü–æ—Ä—Ç –¥–ª—è WebSocket —Å–µ—Ä–≤–µ—Ä–∞
let ws; // –æ–±—ä–µ–∫—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è WebSocket
let clientId; // ID –∫–ª–∏–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –º—ã –ø–æ–ª—É—á–∏–º –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
let originalClientId; // ID –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ —Ä–∞–∑—Ä—ã–≤–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
let uploadInProgress = false; // —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
let currentUploadFile = null; // —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É
function connectWebSocket() {
  if (
    ws &&
    ws.readyState !== WebSocket.CLOSED &&
    ws.readyState !== WebSocket.CLOSING
  ) {
    console.log("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ");
    return;
  }
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket (–ø–æ—Ä—Ç 3006)
  const wsUrl = `ws://${window.location.hostname}:${WS_PORT}`;
  console.log("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket:", wsUrl);

  // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç WebSocket
  ws = new WebSocket(wsUrl);

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
  ws.addEventListener("open", () => {
    console.log("WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
    //showMessage('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  });

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
  ws.addEventListener("message", (event) => {
    try {
      const data = JSON.parse(event.data);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
      if (data.type === "connection") {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        clientId = data.clientId;
        console.log("–ü–æ–ª—É—á–µ–Ω clientId:", clientId);

        // –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ ID, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–≤—è–∑–∏
        if (currentUploadFile && currentUploadFile.clientId) {
          console.log(
            "–°–≤—è–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π ID —Å –Ω–æ–≤—ã–º:",
            currentUploadFile.clientId,
            "->",
            clientId
          );

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–≤—è–∑–∏ ID
          ws.send(
            JSON.stringify({
              type: "linkIds",
              oldId: currentUploadFile.clientId,
              newId: clientId,
            })
          );

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º originalClientId –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ —Ä–∞–∑—Ä—ã–≤–µ
          originalClientId = currentUploadFile.clientId;
          currentUploadFile = null;
        }
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        localStorage.setItem("wsClientId", clientId);
      } else if (data.type === "uploadProgress") {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        updateProgressBar(data.percent, data.filename);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  ws.addEventListener("close", () => {
    console.log("WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ");
    //showMessage('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ—Ç–µ—Ä—è–Ω–æ. –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...', true);

    // –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –±—ã–ª–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º originalClientId
    if (uploadInProgress) {
      currentUploadFile = {
        clientId: originalClientId, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π ID
      };
      console.log("–ó–∞–≥—Ä—É–∑–∫–∞ –±—ã–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID:", originalClientId);
    }

    // –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(connectWebSocket, 3000);
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
  ws.addEventListener("error", (error) => {
    console.error("WebSocket –æ—à–∏–±–∫–∞:", error);
    //showMessage('–û—à–∏–±–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', true);

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ç–∏
    if (navigator.onLine) {
      console.log("–ë—Ä–∞—É–∑–µ—Ä —Å—á–∏—Ç–∞–µ—Ç, —á—Ç–æ –µ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏");
    } else {
      console.log("–ë—Ä–∞—É–∑–µ—Ä —Å—á–∏—Ç–∞–µ—Ç, —á—Ç–æ –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ç–∏");
    }
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
function updateProgressBar(percent, filename) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–≥—Ä—É–∑–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
  if (!uploadInProgress) {
    return;
  }

  const progressContainer = document.getElementById("progressContainer");
  const progressBar = document.getElementById("progressBar");
  const progressText = document.getElementById("progressText");

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã
  if (!progressContainer || !progressBar || !progressText) {
    console.error("–≠–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ DOM");
    return;
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
  progressContainer.style.display = "block";

  // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
  progressBar.style.width = percent + "%";
  progressText.textContent = `${percent}% - ${filename}`;

  // –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
  if (percent >= 100) {
    // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      progressContainer.style.display = "none";
      uploadInProgress = false;
    }, 2000);
  }
}

// —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showMessage(message, isError = false) {
  const notificationArea = document.getElementById("notification-area");

  // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –µ—â–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
  if (!notificationArea) {
    console.log(`${isError ? "–û—à–∏–±–∫–∞" : "–°–æ–æ–±—â–µ–Ω–∏–µ"}: ${message}`);
    return;
  }

  const notification = document.createElement("div");
  notification.className = isError ? "message error" : "message success";
  notification.textContent = message;

  notificationArea.prepend(notification);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
  setTimeout(() => {
    notification.remove();
  }, 5000);
}

document.addEventListener("DOMContentLoaded", function () {
  // console.log('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!');

  const form = document.getElementById("uploadForm");

  // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É
  connectWebSocket();

  loadFilesList();

  // –∑–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞
  async function loadFilesList() {
    console.log("–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤...");

    const response = await fetch("/api/files");
    const result = await response.json();

    console.log("–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞:", result);

    if (result.success) {
      displayFiles(result.files);
    }
  }

  // –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
  function displayFiles(files) {
    const filesList = document.getElementById("filesList");
    const template = document.getElementById("fileItemTemplate");

    if (files.length === 0) {
      filesList.innerHTML = "<p>–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤</p>";
      return;
    }
    filesList.innerHTML = "";

    files.forEach((file) => {
      const fileItem = template.content.cloneNode(true);

      // –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
      fileItem.querySelector(".file-name").textContent = `üìÅ ${file.name}`;
      fileItem.querySelector(
        ".file-size"
      ).textContent = `üíæ –†–∞–∑–º–µ—Ä: ${Math.round(file.size / 1024)} KB`;
      fileItem.querySelector(".file-date").textContent = `üìÖ ${new Date(
        file.uploadDate
      ).toLocaleString("ru-RU")}`;

      const comment = file.comment || "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è";
      fileItem.querySelector(".file-comment").textContent = `üí¨ ${comment}`;

      fileItem.querySelector(".download-btn").addEventListener("click", () => {
        downloadFile(file.id);
      });

      fileItem.querySelector(".delete-btn").addEventListener("click", () => {
        deleteFile(file.id, file.name);
      });

      filesList.appendChild(fileItem);
    });
  }

  // –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
  async function deleteFile(fileId, fileName) {
    if (!confirm(`–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª "${fileName}"?`)) {
      return;
    }

    try {
      const response = await fetch(`/api/files/${fileId}`, {
        method: "DELETE",
      });

      const result = await response.json();

      if (result.success) {
        showMessage(`–§–∞–π–ª "${result.deletedFile}" —É–¥–∞–ª—ë–Ω!`);
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        loadFilesList();
      } else {
        showMessage("–û—à–∏–±–∫–∞: " + result.error);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:", error);
      showMessage("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞");
    }
  }

  // –§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
  window.downloadFile = function (fileId) {
    console.log("–°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª:", fileId);

    // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    window.open("/api/download/" + fileId, "_blank");
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
  form.addEventListener("submit", async function (e) {
    e.preventDefault(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ã—á–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
    // console.log('–§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!');

    const fileInput = document.getElementById("fileInput");
    const commentInput = document.getElementById("commentInput");

    // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
    const file = fileInput.files[0];
    const comment = commentInput.value;

    // console.log('–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª:', file);
    // console.log('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:', comment);

    if (!file) {
      showMessage("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª!");
      return;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏
    uploadInProgress = true;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä (0%)
    updateProgressBar(0, file.name);

    //  console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª:', file.name);

    // –°–æ–∑–¥–∞—ë–º FormData
    const formData = new FormData();
    formData.append("file", file);
    formData.append("comment", comment);

    // –î–æ–±–∞–≤–ª—è–µ–º clientId –¥–ª—è —Å–≤—è–∑–∏ —Å WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º
    if (clientId) {
      formData.append("clientId", clientId);
      console.log("–î–æ–±–∞–≤–ª–µ–Ω clientId:", clientId);
    }

    originalClientId = clientId;

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏—Å–ø–æ–ª—å–∑—É—è originalClientId
      const response = await fetch("/api/upload", {
        method: "POST",
        headers: {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º clientId –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º originalClientId –≤–º–µ—Å—Ç–æ clientId
          "X-Client-ID": originalClientId || clientId || "unknown",
        },
        body: formData,
      });

      // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
      const result = await response.json();
      console.log("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", result);

      if (result.success) {
        showMessage("–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω! ID: " + result.filename);

        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        fileInput.value = "";
        commentInput.value = "";

        loadFilesList();
      } else {
        showMessage("–û—à–∏–±–∫–∞: " + result.message);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", error);
      showMessage("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º", true);
      uploadInProgress = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏
    }
  });
});
