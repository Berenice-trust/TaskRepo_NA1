document.addEventListener('DOMContentLoaded', function() {
    // console.log('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!');

    const form = document.getElementById('uploadForm');


    loadFilesList(); 

    // –∑–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞
    async function loadFilesList() {
        console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤...');
            
        const response = await fetch('/api/files');
        const result = await response.json();
            
        console.log('–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞:', result);

        if (result.success) {
            displayFiles(result.files);
        }
    }


    // –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
    function displayFiles(files) {
        const filesList = document.getElementById('filesList');
         const template = document.getElementById('fileItemTemplate');
    
        
        if (files.length === 0) {
            filesList.innerHTML = '<p>–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤</p>';
            return;
        }
         filesList.innerHTML = '';
    
        files.forEach(file => {
            const fileItem = template.content.cloneNode(true);
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            fileItem.querySelector('.file-name').textContent = `üìÅ ${file.name}`;
            fileItem.querySelector('.file-size').textContent = `üíæ –†–∞–∑–º–µ—Ä: ${Math.round(file.size / 1024)} KB`;
            fileItem.querySelector('.file-date').textContent = `üìÖ ${new Date(file.uploadDate).toLocaleString('ru-RU')}`;
            
            const comment = file.comment || '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è';
            fileItem.querySelector('.file-comment').textContent = `üí¨ ${comment}`;


            fileItem.querySelector('.download-btn').addEventListener('click', () => {
                downloadFile(file.id);
            });

             fileItem.querySelector('.delete-btn').addEventListener('click', () => {
                deleteFile(file.id, file.name);
            });
            
            filesList.appendChild(fileItem);
        });
    }

    // –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    async function deleteFile(fileId, fileName) {
        if (!confirm(`–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª "${fileName}"?`)) {
            return;
        }
        
        try {
            const response = await fetch(`/api/files/${fileId}`, {
                method: 'DELETE'
            });
            
            const result = await response.json();
            
            if (result.success) {
                showMessage(`–§–∞–π–ª "${result.deletedFile}" —É–¥–∞–ª—ë–Ω!`);
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
                loadFilesList();
            } else {
                showMessage('–û—à–∏–±–∫–∞: ' + result.error);
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
            showMessage('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞');
        }
    }

    // –§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
   window.downloadFile = function(fileId) {
        console.log('–°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª:', fileId);
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        window.open('/api/download/' + fileId, '_blank');
    };

    // —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    function showMessage(message, isError = false) {
        const notificationArea = document.getElementById('notification-area');
        
        const notification = document.createElement('div');
        notification.className = isError ? 'message error' : 'message success';
        notification.textContent = message;
        
        notificationArea.prepend(notification);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            notification.remove();
        }, 5000);
    }


    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    form.addEventListener('submit', async function(e) {
        e.preventDefault(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ã—á–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
        console.log('–§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!');
        
        // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã
        const fileInput = document.getElementById('fileInput');
        const commentInput = document.getElementById('commentInput');
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
        const file = fileInput.files[0];
        const comment = commentInput.value;
        
        console.log('–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª:', file);
        console.log('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:', comment);
        
        if (!file) {
            showMessage('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª!');
            return;
        }
        
         console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª:', file.name);


         // –°–æ–∑–¥–∞—ë–º FormData 
        const formData = new FormData();
        formData.append('file', file);
        formData.append('comment', comment);
        
        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            const response = await fetch('/api/upload', {
                method: 'POST',
                body: formData
            });
            
            // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
            const result = await response.json();
            console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', result);
            
            if (result.success) {
                showMessage('–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω! ID: ' + result.filename);
                
                // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
                fileInput.value = '';
                commentInput.value = '';

                loadFilesList();
            } else {
                showMessage('–û—à–∏–±–∫–∞: ' + result.message);
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
            showMessage('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
        }



    });
});